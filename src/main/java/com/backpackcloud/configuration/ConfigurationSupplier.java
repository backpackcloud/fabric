/*
 * The MIT License (MIT)
 *
 * Copyright (c) 2025 Marcelo "Ataxexe" Guimar√£es
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */

package com.backpackcloud.configuration;

import java.util.function.Supplier;
import java.util.stream.Stream;

/// A class that encapsulates a common logic found deepest in the legends of the
/// ancient pieces of voltage that formed the army of the digital century.
///
/// No, this wasn't generated by AI.
///
/// Anyway, when configuring an application, there is always a priority list with
/// places to search for the configuration file.
///
/// This class provides an opinionated priority list, together with a convention
/// for naming the locations. All based on analysis of the digital forges used
/// by both Elves and Dwarfs for multiple centuries.
///
/// Before you start throwing your left arm, remember: this is an opinionated thing.
///
/// @param name      the name of the application
/// @param extension the extension of the configuration file
/// @author Ataxexe
public record ConfigurationSupplier(String name, String extension) implements Supplier<Configuration> {

  /// An even more opinionated way of instantiating this class. It defaults to
  /// `yml` as the extension to use.
  public ConfigurationSupplier(String name) {
    this(name, "yml");
  }

  /// Gets a configuration by checking a priority order for the fist one that is set:
  ///
  /// - {@link #fromEnvironment() environment}
  /// - {@link #fromWorkingDir() working dir}
  /// - {@link #fromUserHome() user home}
  /// - {@link #getDefault() default}
  public Configuration get() {
    return Stream.of(
        fromEnvironment(),
        fromWorkingDir(),
        fromUserHome(),
        getDefault()
      )
      .filter(Configuration::isSet)
      .findFirst()
      .orElse(Configuration.NOT_SUPPLIED);
  }

  /// Gets a configuration using the file pointed by the environment variable `{NAME}_CONFIG_FILE`.
  ///
  /// @return a new configuration.
  public Configuration fromEnvironment() {
    String path = System.getenv(name.toUpperCase() + "_CONFIG_FILE");
    return path != null ? new FileConfiguration(path) : Configuration.NOT_SUPPLIED;
  }

  /// Gets a configuration using the file located at `WORK_DIR/{name}.{extension}`
  ///
  /// @return a new configuration.
  public Configuration fromWorkingDir() {
    return new FileConfiguration("./" + name + "." + extension);
  }

  /// Gets a configuration using the file located at `USER_HOME/{name}.{extension}`.
  ///
  /// @return a new configuration.
  public Configuration fromUserHome() {
    return new FileConfiguration(System.getProperty("user.home") + "/" + name + "." + extension);
  }

  /// Gets a configuration using the file located at `META-INF/{name}.{extension}`.
  ///
  /// @return a new configuration.
  public Configuration getDefault() {
    return new ResourceConfiguration("META-INF/" + name + "." + extension);
  }

}
